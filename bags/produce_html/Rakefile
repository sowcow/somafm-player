require 'slim'
require 'sass'
require_relative '../soma'
require_relative '../bags'

task :default => :opal do
  soma = Soma.load
  html = html_compile channels: soma.channels
  File.write Paths.html_file, html
  # no need for constant in tasks I guess
end

task :opal do
  bags :compile_opal
end


def html_compile hash
  Slim::Template.new { SLIM_TEMPLATE }.render \
    Scope.new hash
end

# without constant slim does not see
#module HTML
#  module_function
module Kernel
  def js_path
    Paths.jsfile.relative_path_from(Paths.html_file.parent)
  end

  # ...
  def channels_json
    require 'yaml' # bad?
    require 'json' # -||-
    JSON.dump YAML.load File.read Paths.channels_file
  end
end


SLIM_TEMPLATE = <<slim
doctype 5
html lang='en'
  head
    title soma-fm
    meta charset='utf-8'
    sass:
      img
        float: left
  body
    - channels.each do |channel|
      .channel x-id=channel.id
        /div = channel.name.to_s
        img src="images/\#{channel.send('img-file')}"
    script
      == "window.Channels = \#{channels_json}\\n"
      == "Channels = Channels.soma.channels"
    script src=js_path
slim

# nested hashes get individual methods for fetching
#
class Hashy < SimpleDelegator

  def self.wrap thing
    case thing
    when Hash then new thing
    when Array then new thing
    else thing # no wrapping
    end
  end

  def initialize given
    case given
    when Hash
      hash = given
      hash.each { |key, value|
        define_singleton_method key do Hashy.wrap value end
      }
    when Array
      array = given
      __setobj__ array.map { |x| Hashy.wrap x }
    else
      # do nothing
    end
  end
end

Scope = Hashy
